services:
  accountsdb:
    container_name: accountsdb
    ports:
      - 3316:3306
    environment:
      MYSQL_DATABASE: accountsdb
    # The container needs to be tagged to the same network as the other microservices.
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    container_name: cardsdb
    ports:
      - 3317:3306
    environment:
      MYSQL_DATABASE: cardsdb
    # The container needs to be tagged to the same network as the other microservices.
    extends:
      file: common-config.yml
      service: microservice-db-config

  loansdb:
    container_name: loansdb
    ports:
      - 3318:3306
    environment:
      MYSQL_DATABASE: loansdb
    # The container needs to be tagged to the same network as the other microservices.
    extends:
      file: common-config.yml
      service: microservice-db-config

  configserver:
    image: "ranju9707/configserver:s7"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    #Config server is now exposing liveness and readiness endpoints. Now using Docker compose check
    #whether Config server is in health state or not
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s #Interval of each try should have a difference of 10 secs
      timeout: 5s #Wait of 5 secs for response before giving up
      retries: 10
      start_period: 10s #Start after 10 secs
    extends:
      file: common-config.yml
      service: microservice-base-config

  accounts:
    image: "ranju9707/accounts:s7" #image_name:tag_name
    container_name: accounts-ms #This avoids giving random name to the container when it is created by image
    ports:
      - "9001:9001" #if multiple port is to be allocated then can add one more using ex. "3001:3001"
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      #Here the communication between the microservice container and database container cannot happen with the
      #localhost. The communication happens with the service name of accountdb only
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
    #Tell docker compose that this microservice is dependent on accountsdb service
    depends_on:
      accountsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  cards:
    image: "ranju9707/cards:s7"
    container_name: cards-ms
    ports:
      - "9002:9002"
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    depends_on:
      cardsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  loans:
    image: "ranju9707/loans:s7"
    container_name: loans-ms
    ports:
      - "9003:9003"
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
    depends_on:
      loansdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config

networks:
  ranju9707:
    driver: bridge